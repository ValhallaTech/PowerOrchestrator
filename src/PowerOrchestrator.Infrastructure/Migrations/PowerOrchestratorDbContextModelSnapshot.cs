// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PowerOrchestrator.Infrastructure.Data;

#nullable disable

namespace PowerOrchestrator.Infrastructure.Migrations
{
    [DbContext(typeof(PowerOrchestratorDbContext))]
    partial class PowerOrchestratorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("powerorchestrator")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PowerOrchestrator.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Details")
                        .HasColumnType("jsonb")
                        .HasColumnName("details");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("entity_type");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb")
                        .HasColumnName("old_values");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<bool>("Success")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("success");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_agent");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("Action")
                        .HasDatabaseName("idx_audit_logs_action");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_audit_logs_created_at");

                    b.HasIndex("EntityId")
                        .HasDatabaseName("idx_audit_logs_entity_id");

                    b.HasIndex("EntityType")
                        .HasDatabaseName("idx_audit_logs_entity_type");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_audit_logs_user_id");

                    b.HasIndex("EntityType", "EntityId", "CreatedAt")
                        .HasDatabaseName("idx_audit_logs_entity_created");

                    b.ToTable("audit_logs", "powerorchestrator");
                });

            modelBuilder.Entity("PowerOrchestrator.Domain.Entities.Execution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<long?>("DurationMs")
                        .HasColumnType("bigint")
                        .HasColumnName("duration_ms");

                    b.Property<string>("ErrorOutput")
                        .HasColumnType("text")
                        .HasColumnName("error_output");

                    b.Property<string>("ExecutedOn")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("executed_on");

                    b.Property<int?>("ExitCode")
                        .HasColumnType("integer")
                        .HasColumnName("exit_code");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Output")
                        .HasColumnType("text")
                        .HasColumnName("output");

                    b.Property<string>("Parameters")
                        .HasColumnType("jsonb")
                        .HasColumnName("parameters");

                    b.Property<string>("PowerShellVersion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("powershell_version");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uuid")
                        .HasColumnName("script_id");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_executions_created_at");

                    b.HasIndex("ScriptId")
                        .HasDatabaseName("idx_executions_script_id");

                    b.HasIndex("StartedAt")
                        .HasDatabaseName("idx_executions_started_at");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_executions_status");

                    b.ToTable("executions", "powerorchestrator");
                });

            modelBuilder.Entity("PowerOrchestrator.Domain.Entities.HealthCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Details")
                        .HasColumnType("jsonb")
                        .HasColumnName("details");

                    b.Property<string>("Endpoint")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("endpoint");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<int>("IntervalMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5)
                        .HasColumnName("interval_minutes");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_enabled");

                    b.Property<DateTime>("LastCheckedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_checked_at");

                    b.Property<long?>("ResponseTimeMs")
                        .HasColumnType("bigint")
                        .HasColumnName("response_time_ms");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("service_name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<int>("TimeoutSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30)
                        .HasColumnName("timeout_seconds");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("IsEnabled")
                        .HasDatabaseName("idx_health_checks_is_enabled");

                    b.HasIndex("LastCheckedAt")
                        .HasDatabaseName("idx_health_checks_last_checked");

                    b.HasIndex("ServiceName")
                        .IsUnique()
                        .HasDatabaseName("idx_health_checks_service_name");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_health_checks_status");

                    b.ToTable("health_checks", "powerorchestrator");
                });

            modelBuilder.Entity("PowerOrchestrator.Domain.Entities.Script", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("ParametersSchema")
                        .HasColumnType("jsonb")
                        .HasColumnName("parameters_schema");

                    b.Property<string>("RequiredPowerShellVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("5.1")
                        .HasColumnName("required_powershell_version");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("tags");

                    b.Property<int>("TimeoutSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(300)
                        .HasColumnName("timeout_seconds");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_scripts_created_at");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_scripts_is_active");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_scripts_name");

                    b.ToTable("scripts", "powerorchestrator");
                });

            modelBuilder.Entity("PowerOrchestrator.Domain.Entities.Execution", b =>
                {
                    b.HasOne("PowerOrchestrator.Domain.Entities.Script", "Script")
                        .WithMany("Executions")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Script");
                });

            modelBuilder.Entity("PowerOrchestrator.Domain.Entities.Script", b =>
                {
                    b.Navigation("Executions");
                });
#pragma warning restore 612, 618
        }
    }
}
